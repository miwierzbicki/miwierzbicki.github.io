---
import "../../styles/styles.css";
import DefaultLayout from "../../layouts/DefaultLayout.astro";
import { Code } from "astro:components";
---

<DefaultLayout>
    <div class="wrapper">
        <h1>STM32 μSD Datalogger</h1>
        <div class="terminal-alert terminal-alert-primary" style="margin-bottom: 20px;">Status: finished</div>
        <h2>Summary:</h2>
        <p>
            The premise of the project was to create a configurable, small
            measurement data logger, tailored strictly to the user's
            requirements.
        </p>
        <h2>Assumptions:</h2>
        <ul>
            <li>Data storage on a microSD card,</li>
            <li>
                Configurable type and number of sensors and reporting method
                (frequency and status)
            </li>
            <li>Temperature measurement</li>
            <li>Voltage measurement</li>
            <li>User interface via OLED and encoder</li>
            <li>Form of overlay (shield) on STM32 Black pill.</li>
        </ul>
        <h2>Components:</h2>
        <ul>
            <li>Microcontroller: STM32F411CEU6 type Blackpill</li>
            <li>3x MAXIM DS18B20 temperature sensor</li>
            <li>3x ADC converter ADS1115</li>
            <li>Built-in ADC converter</li>
        </ul>
        <h2>PCB design:</h2>
        <figure>
            <img
                src="/imgs/PCB.png"
                height="400px"
                alt="PCB design made in EAGLE"
            />
            <figcaption>PCB design made in EAGLE</figcaption>
        </figure>
        <h2>Finished and soldered datalogger:</h2>
        <figure>
            <img
                src="/imgs/PCB_soldered.jpg"
                height="400px"
                alt="Finished board"
            />
            <figcaption>Board with soldered components</figcaption>
        </figure>
        <h2>Breakdown of the code modules:</h2>
        <pre>
<code class="hljs css">- adc.c - instructions related to the operation of analog-to-digital converters, 
- ds18b20.c - instructions related to the operation of the DS18B20 thermometer, 
- encoder.c - instructions related to the operation of the rotary encoder, 
- main.c - main program file  
- menu.c - instructions related to menu and user interface operation, 
- save.c - instructions related to saving measurements, 
- sd.c - instructions related to SD card operation. </code></pre>

        <h2>User interface diagram:</h2>
        <figure>
            <img
                src="/imgs/UI_schema.jpg"
                height="400px"
                alt="Diagram of interface screens"
            />
            <figcaption>Diagram of interface screens</figcaption>
        </figure>

        <h2>Passing through the interface screens:</h2>
        <figure>
            <img
                src="/imgs/Menu_options.jpg"
                height="300px"
                alt="Cycle between 4 screens"
            />
            <figcaption>Cycle between 4 screens</figcaption>
        </figure>
        <h2>Measurement logic:</h2>
        <p>
            Interrupts have been used to define the timing of readings from a
            given sensor. Four channels are defined, each with different
            sampling times. Interrupts are generated using the microcontroller's
            built-in counter in Output Compare No Output mode (counting to the
            value in the CCRx register). A callback is called in the interrupt
            handler routine.
        </p>
        <h2>Writing to a microSD card</h2>
        <p>
            Used FatFS file system library using itnerface SPI
            “cubeide-sd-card”. ~ kiwih
            <br />
            Writing via circular buffer (100 items) and FatFS controller to .csv
            file on microSD card. In each line, all the stored sensor information
            and the time signature from the RTC clock were written.
        </p>
        <h2>Debugging:</h2>
        <p>
            Implemented error messages related to SD controller via COM port
            (UART<>USB bridge). </>
            <h2>Measurements:</h2>
            <ul>
                <li>ADC linearity measurements</li>
                <img
                src="/imgs/ADC_measure.jpg"
                height="300px"
                alt="Graph of the voltage measurement of the transmitter against the reference instrument."
            />
            <figcaption>Graph of the voltage measurement of the transmitter against the reference instrument.</figcaption>
                <p>The characteristics of the reference instrument coincide with those of the transducer under test. The gain error can be defined as the ratio of the slope of the characteristics of the transducer under test, to the characteristics of the reference instrument.  The readings from the approximation of the slope of the characteristics are, respectively: -0.09 and -0.1, resulting in a calculated gain error of the transducer equal to 0.9. The transducer maintains linearity over the entire measurement range. 

                    </p>
                <li>Gain error measurement</li>
                <li>Measurement of operating time under typical use</li>
            </ul>
        </p>
    </div>

    <style>
        .wrapper {
            text-align: justify;
            max-width: 1200px;
        }

        pre code {
            overflow-x: hidden !important;
        }

        figure {
            text-align: center;
        }

        figcaption {
            margin-bottom: 20px;
        }

        .bar-wrapper { 
            display: flex;
            justify-content: center;
        }
    </style>
</DefaultLayout>
